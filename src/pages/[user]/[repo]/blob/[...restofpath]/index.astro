---
import Layout from "../../../../../layouts/Layout.astro";
import type {
  RepoIndex,
  Repository,
} from "../../../../../cloudstate/simple-repo";
import { configureFreestyle, useCloud } from "freestyle-sh";
import { FileIcon } from "../../../../../lib/icon-map";
import type { AuthCS } from "../../../../../cloudstate/auth";
import { RepoBar } from "../../../../../components/RepoBar";
import hljs from 'highlight.js/lib/core';
import javascript from 'highlight.js/lib/languages/javascript';
import markdown from 'highlight.js/lib/languages/markdown'; 
import typescript from 'highlight.js/lib/languages/typescript';

// Then register the languages you need
hljs.registerLanguage('javascript', javascript);
hljs.registerLanguage('markdown', markdown);
hljs.registerLanguage('typescript', typescript);



configureFreestyle({
  createHeaders: () => Astro.request.headers,
});

const repoIndex = useCloud<typeof RepoIndex>("repo-index");
const repoData = await repoIndex.getRepo({
  owner: Astro.params.user!,
  name: Astro.params.repo!,
});
const simpleRepo = useCloud<typeof Repository>(repoData.id);
const latest = await simpleRepo.getLatestCodebaseMetadata();
const pathBeforeBlob = Astro.url.pathname.slice(
  0,
  Astro.url.pathname.length - Astro.params.restofpath?.length!
);
// console.log("REST OF PATH", Astro.params.restofpath);
const restOfPathBranch = Astro.params.restofpath?.split("/")[0];

const restOfPathAfterBranch = Astro.params.restofpath
  ?.split("/")
  .slice(1)
  .join("/");
const fileText = await simpleRepo.getFile(restOfPathAfterBranch!);

const fileExtension: string = restOfPathAfterBranch?.split(".").pop() as string;
console.log("FILE EXTENSION", fileExtension);

const codeHtml = hljs.highlight(fileExtension, fileText).value;

const auth = useCloud<typeof AuthCS>("auth");
if (!auth.getCurrentUser()) {
  return Astro.redirect("/signin");
}
---

<Layout title="Blobalia">
  <RepoBar client:load repoMetadata={repoData}/>
  <div class="grid grid-cols-[1fr,3fr] w-full h-screen mx-8">
  
    <div class="border-r border-slate-800 h-full p-4 flex flex-col">
      {
        Object.entries(latest.files).map(([key, fileMeta]) => {
          return (
            <>
              {fileMeta.fileType === "file" ? (
                <a
                  class=" hover:bg-white/10 rounded-lg px-2 py-1 transition-all flex flex-row items-center focus:bg-white/20"
                  href={pathBeforeBlob + restOfPathBranch + '/' + key}
                >
                  <FileIcon metadata={{ ...fileMeta, path: key }} />

                  <span>{key}</span>
                </a>
              ) : (
                ""
              )}
            </>
          );
        })
      }
    </div>
    <div class="m-4 p-2 rounded-lg"><pre set:html={codeHtml}></pre></div>
  </div>
</Layout>
